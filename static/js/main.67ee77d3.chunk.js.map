{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","contactsActions","addContact","createAction","newName","number","payload","id","uuid","name","removeContact","changeFilter","items","createReducer","actions","state","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","mainStore","persistor","persistStore","INITIAL_STATE","alert","message","ContactForm","handleInputChange","e","target","value","setState","handleSubmit","preventDefault","onSubmit","props","validateForm","resetForm","setTimeout","isExistContact","find","contact","this","CSSTransition","in","timeout","classNames","fadeAlert","unmountOnExit","className","s","form","sectionName","label","inputTitle","input","type","onChange","sectionNumber","button","Component","connect","dispatch","ContactListItem","onRemove","contactListItem","contactName","onClick","buttonTitle","getVisibleContacts","allContacts","console","log","normalizedFilter","toLowerCase","includes","TransitionGroup","component","contactList","map","fadeStyles","filterInput","App","page","appear","phoneBookTitle","findContacts","findContactsTitle","ContactList","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.67ee77d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__3O83b\",\"contactListItem\":\"ContactList_contactListItem__cJh19\",\"button\":\"ContactList_button__2NiF8\",\"buttonTitle\":\"ContactList_buttonTitle__bk-Kd\",\"contactName\":\"ContactList_contactName__1HxHM\",\"enter\":\"ContactList_enter__3u6Vf\",\"enterActive\":\"ContactList_enterActive__2zuN0\",\"exit\":\"ContactList_exit__NrXCb\",\"exitActive\":\"ContactList_exitActive__oaCEY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__rwqmg\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst addContact = createAction(\"contacts/add\", (newName, number) => ({\r\n  payload: {\r\n    id: uuid(),\r\n    name: newName,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst removeContact = createAction(\"contacts/remove\");\r\n\r\nconst changeFilter = createAction(\"contacts/changeFilter\");\r\n\r\nconst contactsActions = {\r\n  addContact,\r\n  removeContact,\r\n  changeFilter,\r\n};\r\n\r\nexport default contactsActions;\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./contacts-actions\";\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.removeContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contactsReducer from \"../redux/contacts/contacts-reducer\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst mainStore = {\r\n  store,\r\n  persistor,\r\n};\r\nexport default mainStore;\r\n","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./ContactForm.module.css\";\r\nimport fadeAlert from \"../../index.css\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contacts-actions\";\r\n\r\nconst INITIAL_STATE = {\r\n  number: \"\",\r\n  name: \"\",\r\n  alert: false,\r\n  message: \"\",\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = INITIAL_STATE;\r\n\r\n  handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { onSubmit } = this.props;\r\n    const isValidateForm = this.validateForm();\r\n\r\n    if (!isValidateForm) return;\r\n\r\n    onSubmit(name, number);\r\n    this.resetForm();\r\n  };\r\n\r\n  validateForm = () => {\r\n    const { name, number } = this.state;\r\n    const { contacts } = this.props;\r\n\r\n    if (!name || !number) {\r\n      this.setState({ alert: true, message: \"Some field is empty\" });\r\n      setTimeout(() => this.setState({ alert: false, message: \"\" }), 2000);\r\n      return;\r\n    }\r\n\r\n    const isExistContact = !!contacts.find((contact) => contact.name === name);\r\n\r\n    isExistContact &&\r\n      this.setState({ alert: true, message: \"This contact already exists\" });\r\n    setTimeout(() => this.setState({ alert: false, message: \"\" }), 2000);\r\n    return !isExistContact;\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState(INITIAL_STATE);\r\n  };\r\n\r\n  render() {\r\n    const { name, number, alert, message } = this.state;\r\n    return (\r\n      <>\r\n        <CSSTransition\r\n          in={alert}\r\n          timeout={250}\r\n          classNames={fadeAlert}\r\n          unmountOnExit\r\n        >\r\n          <p className={fadeAlert.alert}>{message}</p>\r\n        </CSSTransition>\r\n        <form className={s.form} onSubmit={this.handleSubmit}>\r\n          <section className={s.sectionName}>\r\n            <label className={s.label}>\r\n              <p className={s.inputTitle}>Name</p>\r\n              <input\r\n                className={s.input}\r\n                type=\"text\"\r\n                value={name}\r\n                name=\"name\"\r\n                onChange={this.handleInputChange}\r\n              />\r\n            </label>\r\n          </section>\r\n          <section className={s.sectionNumber}>\r\n            <label className={s.label}>\r\n              <p className={s.inputTitle}>Number</p>\r\n              <input\r\n                className={s.input}\r\n                type=\"tel\"\r\n                value={number}\r\n                name=\"number\"\r\n                onChange={this.handleInputChange}\r\n              />\r\n            </label>\r\n          </section>\r\n          <button className={s.button} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (newName, number) =>\r\n    dispatch(contactsActions.addContact(newName, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import s from \"./ContactList.module.css\";\r\n\r\nconst ContactListItem = ({ id, name, number, onRemove }) => {\r\n  return (\r\n    <li className={s.contactListItem}>\r\n      <span className={s.contactName}>\r\n        {name}: {number}{\" \"}\r\n      </span>\r\n\r\n      <button className={s.button} onClick={() => onRemove(id)}>\r\n        <p className={s.buttonTitle}>delete</p>\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ContactListItem;\r\n","import { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contacts-actions\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./ContactList.module.css\";\r\nimport fadeStyles from \"./ContactList.module.css\";\r\nimport ContactListItem from \"./ContactListItem\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nconst ContactsList = ({ contacts, onRemove }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\" className={s.contactList}>\r\n      {contacts.map((contact) => (\r\n        <CSSTransition key={contact.id} timeout={250} classNames={fadeStyles}>\r\n          <ContactListItem {...contact} onRemove={onRemove} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  console.log(allContacts);\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return allContacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onRemove: (id) => dispatch(contactsActions.removeContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Filter.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contacts-actions\";\r\n\r\nconst Filter = ({ filter, onChange }) => {\r\n  return (\r\n    <div className={s.filter}>\r\n      <input\r\n        className={s.filterInput}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={({ target }) => onChange(target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) => dispatch(contactsActions.changeFilter(e)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { CSSTransition } from \"react-transition-group\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\nimport s from \"./index.css\";\n\nfunction App() {\n  return (\n    <div className={s.page}>\n      <CSSTransition\n        in={true}\n        appear={true}\n        timeout={500}\n        classNames={s}\n        unmountOnExit\n      >\n        <h1 className={s.phoneBookTitle}>Phonebook</h1>\n      </CSSTransition>\n\n      <ContactForm />\n\n      {/* <CSSTransition\n        in={contacts.length > 1}\n        appear={true}\n        timeout={250}\n        unmountOnExit\n        classNames={fadeFilter}\n      > */}\n      <div className={s.findContacts}>\n        <h2 className={s.findContactsTitle}>Find contacts</h2>\n        <Filter />\n      </div>\n      {/* </CSSTransition> */}\n\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport mainStore from \"./redux/store\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Provider store={mainStore.store}>\n    <PersistGate loading={null} persistor={mainStore.persistor}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}